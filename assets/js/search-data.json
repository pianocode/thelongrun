{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mlgxmez.github.io/thelongrun/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Building a REST API with TensorFlow Serving (part 2)",
            "content": "This post is the second part of the tutorial of Tensorflow Serving in order to productionize Tensorflow objects and build a REST API to make calls to them. Part 1 is located here. . Once these Tensorflow objects have been generated, it’s time to make them publicly available to everyone. By building a REST API around the object, people will be able to use your service in their project. . Docker in a nutshell . Docker is a tool to build isolated environments (containers) in your computer in such a way that it doesn’t get into conflict with any file or program in your local filesystem (the host). Among all its features, I would highlight these: . You can run containers with only what’s strictly necessary to run your piece of code. Containers are a lighter version of virtual machines. | Docker networking capabilities allows you easily communicate multiple containers to each other. | Even if your OS is not fully compatible with the tool you want to use, with containers you don’t run into compatibility issues anymore. | Docker containers will run in the same way regardless of the hosting environment, be in your computer or a server running in a cloud service. | . TensorFlow Serving has a quick start tutorial that’s good introduction to the package. . # Download the TensorFlow Serving Docker image and repo docker pull tensorflow/serving git clone https://github.com/tensorflow/serving # Location of demo models TESTDATA=&quot;$(pwd)/serving/tensorflow_serving/servables/tensorflow/testdata&quot; # Start TensorFlow Serving container and open the REST API port docker run -t --rm -p 8501:8501 -v &quot;$TESTDATA/saved_model_half_plus_two_cpu:/models/half_plus_two&quot; -e MODEL_NAME=half_plus_two tensorflow/serving &amp; # Query the model using the predict API curl -d &#39;{&quot;instances&quot;: [1.0, 2.0, 5.0]}&#39; -X POST http://localhost:8501/v1/models/half_plus_two:predict # Returns =&gt; { &quot;predictions&quot;: [2.5, 3.0, 4.5] } . Pay attention to the arguments passed to the docker run command, specifically the ones accepting external values: . -p 8501:8501, publishes the container’s port specified at the right of the colon, and is mapped to the same port in the host, specified at the left of the colon. For REST API, Tensorflow Serving makes use of this port, so don’t change this parameter in your experiments. | -v &quot;$TESTDATA/saved_model_half_plus_two_cpu:/models/half_plus_two&quot;, attaches a volume to the container. This volume contains a copy of the folder where you saved your Tensorflow object. Just a level above the folder named /1/. This folder will appear in the container, under /models/. | -e MODEL_NAME=half_plus_two, defines an environment variable. This variable is required to serve your model. For convenience, use the same identifier as the container’s folder name where you attached your model. | . Deploying servables in containers . You can design an API for your servable, but TensorFlow Serving abstracts away this step thanks to Docker. Once you deploy the container, you can make a request to the server to perform some kind of computation. Within the body of the request you may attach data (required to run the servable) and obtain some an output in return. . To make the computation you need to specify the endpoint URL of the servable in your request. In the example shown above this endpoint URL is http://localhost:8501/v1/models/half_plus_two:predict. Now everything is ready to run our TensorFlow objects. We will start with the Keras model: . docker run -t --rm -p 8501:8501 -v &quot;$(pwd)/mobilenet_v2_test:/models/mobilenet_v2_test&quot; -e MODEL_NAME=mobilenet_v2_test tensorflow/serving &amp; . When this command was executed, the current directory was tmp/ (where I put all my models). and this is what the terminal returned: . . The model is up and ready to send request to. . Making requests to servables . Now that the container is up and running we can send requests with an image to be classified. I’ll show you two ways to achieve that. . With curl library . First I made a little shell script (download it from here) that receives the path of an image file as an argument and makes the call itself with the library curl. We’re going to send the image of this chilling panda: . . And this is how we make the call with the API we built: . . The second example involves the servable that adds 2 to every element of the vector: . . With requests library . The library requests allows you doing the same thing but using Python code. . import json import requests import base64 data = {} with open(&#39;../../Downloads/imagenes-osos-panda.jpg&#39;, mode=&#39;rb&#39;) as file: img = file.read() data = {&quot;inputs&quot;:[{&quot;b64&quot;:base64.encodebytes(img).decode(&quot;utf-8&quot;)}]} # Making the request r = requests.post(&quot;http://localhost:8501/v1/models/mobilenet_v2_test:predict&quot;, data=json.dumps(data)) r.content # And returns: # b&#39;{ n &quot;outputs&quot;: [ n &quot;giant panda&quot; n ] n}&#39; . In this piece of code, the input image is parsed as a JSON file using Base64 encoding before sending the request. More details on how to accomplish this is explained in the TensorFlow documentation. . Building a REST API with TensorFlow Serving is the stepping stone to use more advanced features. These will be covered in a future post. Stay tuned for more content on TensorFlow Serving! .",
            "url": "https://mlgxmez.github.io/thelongrun/markdown/2020/01/26/tf-serving-part2.html",
            "relUrl": "/markdown/2020/01/26/tf-serving-part2.html",
            "date": " • Jan 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mlgxmez.github.io/thelongrun/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Building a REST API with TensorFlow Serving (part 1)",
            "content": "One of the features that I personally think is undervalued from TensorFlow is the capability of serving TensorFlow models. At the moment of writing this post, the API that helps you do that is named TensorFlow Serving and is part of the TensorFlow Extended (TFX) ecosystem. . This post and the following one, will show you how to build a REST API with TensorFlow Serving. From serializing a TensorFlow object up to testing the API endpoint. . What are servables? . Functions, embeddings and saved models are all objects that can be used as servables. How are servables defined in TensorFlow? . This is up to you but they must be able to be saved in what’s called the SavedModel format. This format preserves the components of the TensorFlow object in the same state when the object is loaded in a different environment. The components of a TensorFlow object can be weights, the graph, additional assets, etc. . This post covers two types of objects: . TensorFlow functions | Keras models | . TensorFlow function as servable . TensorFlow functions are saved as valid servables if are defined in this way: . class Adder(tf.Module): @tf.function(input_signature=[tf.TensorSpec(shape=[None, 3], dtype=tf.flaot32, name=&#39;x&#39;)]) def sum_two(self, x): return x + 2 . Function definition inside Python class | The parent class has to be tf.Module | The @tf.function decorator translates the function definition into a TensorFlow graph | The input_signature argument defines the type and shape of tensors that are accepted to be passed in the function | . To return tensors with two dimensions, its shape has three elements being the second the length of the second dimension. Another example of a TensorFlow function: . class Randomizer(tf.Module): @tf.function def fun_runif(self, N): return tf.random.uniform(shape=(N,)) . Notice that input_signature in the decorator is not mandatory but always is good to include some safety tests when functions go into production. Now we create instances of these two object and save them in the local filesystem. For more information about tf.saved_model check this . # For the first function myfun = Adder() tf.saved_model.save(myfun, &quot;tmp/sum_two/1&quot;) # For the second function myfun2 = Randomizer() tf.saved_model.save(myfun2, &quot;tmp/fun_runif/1&quot;) . Keras model as servable . The same can be done with Keras models. This code snippet downloads a pretrained model for image classification from TensorFlow Hub. A custom class is created to preprocess external images. . class CustomMobileNet_string(tf.keras.Model): model_handler = &quot;https://tfhub.dev/google/imagenet/mobilenet_v2_035_224/classification/4&quot; def __init__(self): super(CustomMobileNet_string, self).__init__() self.model = hub.load(self.__class__.model_handler) self.labels = None # Design you API with &#39;tf.function&#39; decorator @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.string)]) def call(self, input_img): def _preprocess(img_file): img_bytes = tf.reshape(img_file, []) img = tf.io.decode_jpeg(img_bytes, channels=3) img = tf.image.convert_image_dtype(img, tf.float32) return tf.image.resize(img, (224, 224)) labels = tf.io.read_file(self.labels) labels = tf.strings.split(labels, sep=&#39; n&#39;) img = _preprocess(input_img)[tf.newaxis,:] logits = self.model(img) get_class = lambda x: labels[tf.argmax(x)] class_text = tf.map_fn(get_class, logits, tf.string) return class_text # index of the class . The class inherits from tf.keras.Model and there are few things to discuss about it: . The input to the model is a string of bytes, which come in a JSON file. More on that in the second part of the tutorial. | tf.reshape is at the top of the preprocessing stage due to shape restrictions set in the @tf.function decorator. | The attribute labels store ImageNet labels (available ) because we want the model to return the label as text. | There’s a slight change in the code when we save this servable: . model_string = CustomMobileNet_string() # Save the image labels as an asset, saved in &#39;Assets&#39; folder model_string.labels = tf.saved_model.Asset(&quot;data/labels/ImageNetLabels.txt&quot;) tf.saved_model.save(model_string, &quot;tmp/mobilenet_v2_test/1/&quot;) . To add more components besides the model into the SavedModel object, we need an Asset. The way it’s done here is by adding the asset as an attribute of the class instance before saving the model. . Further details . When the model is saved, you can navigate to the directory and should see the following directory structure: . . The files generated are: . the graph of the function or model, saved in a Protobuf file with extension .pb | the weights of the model or any TensorFlow Variable used in the servable, saved in the variables folder | extra components are saved in the assets folder but it is empty in our examples | . There are some questions that may arise when you build your own functions or models: . What’s the reasoning behind the choice of parent classes? . Attaching tf.Module class to a tf.function allows the latter to be saved with tf.saved_model. The same goes for the tf.keras.Model. You can find more info . Why you add /1 in the model’s path? . Servables must have an ID indicating the version of the model we are running inside the container. It’s helpful to keep track of multiple versions of your model when you are monitoring their metrics. You can a more in-depth explanation in the following . . Now, take a break and be ready to tackle TensorFlow Serving in part 2. .",
            "url": "https://mlgxmez.github.io/thelongrun/markdown/2020/01/12/tf-serving-part1.html",
            "relUrl": "/markdown/2020/01/12/tf-serving-part1.html",
            "date": " • Jan 12, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Maximum Likelihood estimation with TensorFlow",
            "content": "What to do when they give you a dataset and they ask you to model its distribution? . Start off by plotting a histogram your dataset. The distribution of values should be familiar to you... unless you have overlooked all the families of distributions out there. As discussed in the post on random variables, every distribution is defined by a set of parameters. The values of such parameters can be estimated with the technique called Maximum Likelihood Estimation (MLE). . To do that, we will introduce the Bayes&#39; theorem: . $$ p( theta vert D) = frac{p(D vert theta)p( theta)}{p(D)} $$Starting on the right-hand side: . $p(D vert theta)$ is the likelihood function. It measures how likely it is that $D$ has been generated from a certain distribution with parameters $ theta$. | $p( theta)$ is the prior distribution. Here you specify the a priori knowledge you have about your parameters. Your parameters are random variables and you need to define what are the values (and their probabilities) those parameters can have. | $p(D)$ is a normalization constant. It can be estimated by a weighted sum of all the conditional probabilities of your data for each the possible value of your parameters. The weights are the prior probabilities at each value. For MLE, this component is not that important. | . On the left-hand side: . $p( theta vert D)$ is the posterior distribution. Once you get information about your data you can update the estimate of the distribution of your parameters. | . As the name of this technique suggests, we are interested in estimating the values of the parameters that maximize the likelihood function. Mathematically speaking: $$ hat{ theta}_{ML} = argmax_{ theta} ; p(D vert theta) $$ . Depending on the complexity of the true distribution, a closed-form solution to this problem can be found. This notebook will teach you how to find a good estimate of $ theta$ using TensorFlow Probability. . Problem setup . . Note: Although this is a toy problem, the code can be adapted to suit your needs . import tensorflow as tf import tensorflow_probability as tfp tfd = tfp.distributions tf.executing_eagerly() . True . Helper functions . params_to_func = {&#39;mu&#39;: tf.math.reduce_mean, &#39;sigma&#39;:tf.math.reduce_std, &#39;rate&#39;: tf.math.reduce_mean} colors_encoding=[&#39;b&#39;,&#39;m&#39;,&#39;g&#39;] . def loss(model, data): total_log_prob = -tf.reduce_mean(model.log_prob(data)) return total_log_prob def grad(model, inputs): with tf.GradientTape() as tape: loss_value = loss(model, inputs) return loss_value, tape.gradient(loss_value, model.trainable_variables) def mle_run(data, model, parameters, optimizer, steps=1000, verbose=False): update_list = [] prob_values = [] value_range = tf.linspace(tf.reduce_min(data),tf.reduce_max(data), 100) for i in range(steps): loss_value, grads = grad(model, data) optimizer.apply_gradients(zip(grads, parameters)) if i % 10 == 0: update_list.append(( optimizer.iterations.numpy(),loss_value.numpy(), *[p.numpy()[0] for p in parameters])) param_str = &quot;, &quot;.join([p.name.split(&#39;:&#39;)[0]+&quot;: &quot;+str(p.numpy()) for p in parameters]) iter_info = f&quot;Step: {optimizer.iterations.numpy()}, initial loss: {loss_value.numpy()}, {param_str}&quot; if verbose: print(iter_info) prob_values.append(model.prob(value_range)) return update_list, prob_values, value_range . To fit our data to a dsitribution, we use two functions: . A loss function, here defined as the loss(...) function. You will notice we are using the log-probability of the likelihood function. This performs the maximization of the likelihood function as discussed above, but using a workaround. TensorFlow optimization operation is a minimization process. We instead minimize the negative log-likelihood but both ways accomplish the same result. Using the log-probability instead of raw probabilities deters from running into underflow issues when calculating the likelihood of hundreds of data points. The loss function will depend on the data and parameters that have been declared. | A function to record the gradients. These gradients are calculated by differentiation of the loss function with respect to the parameters and lets you update the parameters during the learning process. The tape object from TensorFlow takes care of everything as shown in the code. This process is called Automatic Differentiation. | . In each step during training, the grad(...) function returns the loss and the gradients, and apply_gradients(...) uses the Adam optimizer to update the parameters of the model. And mle_run(...) is a wrapper to handle that connects all the steps in the training process. . # Code adapted from: https://alexgude.com/blog/matplotlib-blitting-supernova/ from functools import partial from collections import namedtuple import matplotlib.pyplot as plt from matplotlib import animation def init_fig(f, ax, artists, data): freq, bins, _ = plt.hist(data, bins=50, density = True); # Set axis and plot titles ax.set_title(&quot;Fitting data with Maximum Likelihood&quot;, fontsize=20) ax.set_xlabel(&quot;Values of the distribution&quot;, fontsize=14) ax.set_ylabel(r&quot;$p(D| theta)$&quot;, fontsize=14) ax.set_xlim((tf.reduce_min(data)-0.1*tf.math.abs(tf.reduce_min(data))).numpy(), (tf.reduce_max(data)+0.1*tf.math.abs(tf.reduce_max(data))).numpy() ) ax.set_ylim(0.,freq.max()) return artists def frame_iter(update_list, prob_values): for i in range(len(prob_values)): yield (update_list[i][0], prob_values[i]) def update_artists(frames, artists, value_range): s, p = frames artists.prob.set_data(value_range.numpy(), p) artists.step.set_text(&quot;Step &quot; + str(s)) # Function to plot learning curves def plot_curves(update_lists, data, params_list): from pandas import DataFrame param_names = [p.name.split(&#39;:&#39;)[0] for p in params_list] learning_df = DataFrame(update_lists, columns=[&quot;Step&quot;, &quot;Loss&quot;, *param_names]) f, ax = plt.subplots(1+len(params_list), 1, sharex = True, figsize=(16, 8)) learning_df.plot(x = &quot;Step&quot;, y=&#39;Loss&#39;,style=&quot;r--X&quot; ,ax=ax[0]) for i, p in enumerate(param_names): learning_df.plot(x = &quot;Step&quot;, y=p, style=f&quot;{colors_encoding[i]}--*&quot;,linewidth=3,ax=ax[i+1]) ax[i+1].axhline(params_to_func[p](data).numpy(), color=colors_encoding[i]) ax[i+1].legend([f&quot;MLE {p}&quot;,f&quot;True {p}&quot;]) plt.tight_layout() . MLE of a Normal distribution . The first example shows MLE to estimate the parameters of the Normal distribution. . x = 0.66+tf.random.normal([5000]) # Two variables mu = tf.Variable([0.], name=&quot;mu&quot;) # Mean of the distribution sigma = tf.Variable([3.], name=&quot;sigma&quot;) # Standard deviation of the distribution # The model is a probability distribution model = tfd.Normal(loc=mu, scale=sigma) . optimizer = tf.optimizers.Adam(0.01) ul, pv, vr = mle_run(x, model, [mu, sigma], optimizer, steps=300, verbose=True) . Step: 1, initial loss: 2.096885919570923, mu: [0.00999956], sigma: [2.99] Step: 11, initial loss: 2.061382532119751, mu: [0.10957403], sigma: [2.8898435] Step: 21, initial loss: 2.0254456996917725, mu: [0.20699488], sigma: [2.7890003] Step: 31, initial loss: 1.989081621170044, mu: [0.3000498], sigma: [2.6870286] Step: 41, initial loss: 1.952284812927246, mu: [0.3863772], sigma: [2.5836797] Step: 51, initial loss: 1.91502046585083, mu: [0.4635905], sigma: [2.4788706] Step: 61, initial loss: 1.8772048950195312, mu: [0.5294097], sigma: [2.3726325] Step: 71, initial loss: 1.8386989831924438, mu: [0.5819178], sigma: [2.2650642] Step: 81, initial loss: 1.7993332147598267, mu: [0.6199987], sigma: [2.1563034] Step: 91, initial loss: 1.7589679956436157, mu: [0.64385754], sigma: [2.0465164] Step: 101, initial loss: 1.717577338218689, mu: [0.65536284], sigma: [1.9359089] Step: 111, initial loss: 1.675325632095337, mu: [0.65791076], sigma: [1.8247592] Step: 121, initial loss: 1.6326215267181396, mu: [0.65569293], sigma: [1.713486] Step: 131, initial loss: 1.5901585817337036, mu: [0.6525456], sigma: [1.6027392] Step: 141, initial loss: 1.5489904880523682, mu: [0.650819], sigma: [1.4935323] Step: 151, initial loss: 1.510629653930664, mu: [0.6508618], sigma: [1.3874239] Step: 161, initial loss: 1.4770770072937012, mu: [0.6515833], sigma: [1.2867572] Step: 171, initial loss: 1.450575590133667, mu: [0.6518698], sigma: [1.1949072] Step: 181, initial loss: 1.4328429698944092, mu: [0.6516611], sigma: [1.1163028] Step: 191, initial loss: 1.4238094091415405, mu: [0.65154165], sigma: [1.055703] Step: 201, initial loss: 1.4209381341934204, mu: [0.6516305], sigma: [1.0162032] Step: 211, initial loss: 1.4206560850143433, mu: [0.6516502], sigma: [0.9967599] Step: 221, initial loss: 1.4207396507263184, mu: [0.6516119], sigma: [0.99183154] Step: 231, initial loss: 1.4207048416137695, mu: [0.6516212], sigma: [0.9941876] Step: 241, initial loss: 1.4206568002700806, mu: [0.6516306], sigma: [0.99821544] Step: 251, initial loss: 1.420642614364624, mu: [0.65162265], sigma: [1.0011497] Step: 261, initial loss: 1.420642375946045, mu: [0.6516233], sigma: [1.002436] Step: 271, initial loss: 1.4206427335739136, mu: [0.6516258], sigma: [1.0025692] Step: 281, initial loss: 1.4206421375274658, mu: [0.65162426], sigma: [1.0022261] Step: 291, initial loss: 1.4206420183181763, mu: [0.65162414], sigma: [1.0018642] . f, ax = plt.subplots(figsize=(18,10)) Artists = namedtuple(&quot;Artists&quot;,(&quot;prob&quot;,&quot;step&quot;)) artists = Artists(plt.plot([], [], &quot;r--&quot;,animated=True)[0], ax.text(x=0.9*vr[-1].numpy(), y = 0.05, s=&quot;&quot;)) init = partial(init_fig, f=f, ax=ax, artists=artists, data=x) update = partial(update_artists, artists=artists, value_range=vr) frame = partial(frame_iter, update_list=ul, prob_values=pv) ani = animation.FuncAnimation(fig=f, func=update, frames = frame, init_func = init) . ani_file = &#39;assets/mle_normal.mp4&#39; # Save animation into MP4 file ani.save(filename=ani_file) . The following animation suggests the learned parameters produce data points very similar to our sample data, and therefore we call the model along with the estimated parameters the data generating process (DGP) of our dataset (animation uploaded to YouTube). . To assess the accuracy of our estimation, here we&#39;ll show the learning curves. . plot_curves(ul, x, [mu,sigma]) . MLE for a Posson distribution . The second example we use MLE to estimate the parameter of a Poisson distribution (discrete distribution with only one parameter). . TRUE_RATE = 1.4 fake_samples = tf.random.poisson([300], TRUE_RATE) fake_samples = tf.cast(tf.math.ceil(fake_samples), tf.float32) # Create the model rate = tf.Variable([5.], name=&#39;rate&#39;) # Give the parameter an initial value model = tfd.Poisson(rate=rate) # Create the optimizer optimizer = tf.optimizers.Adam(0.01) . ulp, pvp, vrp = mle_run(fake_samples, model, [rate], optimizer, steps=800, verbose=True) . Step: 1, initial loss: 3.328267812728882, rate: [4.9900002] Step: 11, initial loss: 3.2564356327056885, rate: [4.890034] Step: 21, initial loss: 3.1852827072143555, rate: [4.7902207] Step: 31, initial loss: 3.114912748336792, rate: [4.690674] Step: 41, initial loss: 3.04541015625, rate: [4.5914807] Step: 51, initial loss: 2.976839542388916, rate: [4.4927044] Step: 61, initial loss: 2.9092538356781006, rate: [4.3943915] Step: 71, initial loss: 2.842700481414795, rate: [4.2965813] Step: 81, initial loss: 2.77722430229187, rate: [4.1993074] Step: 91, initial loss: 2.7128684520721436, rate: [4.102606] Step: 101, initial loss: 2.6496806144714355, rate: [4.006513] Step: 111, initial loss: 2.587705135345459, rate: [3.9110672] Step: 121, initial loss: 2.526992082595825, rate: [3.8163097] Step: 131, initial loss: 2.4675910472869873, rate: [3.7222848] Step: 141, initial loss: 2.4095561504364014, rate: [3.62904] Step: 151, initial loss: 2.3529374599456787, rate: [3.5366259] Step: 161, initial loss: 2.29779314994812, rate: [3.4450974] Step: 171, initial loss: 2.2441794872283936, rate: [3.3545136] Step: 181, initial loss: 2.192152500152588, rate: [3.2649364] Step: 191, initial loss: 2.141772985458374, rate: [3.1764345] Step: 201, initial loss: 2.0930991172790527, rate: [3.0890791] Step: 211, initial loss: 2.046189785003662, rate: [3.0029485] Step: 221, initial loss: 2.0011038780212402, rate: [2.9181247] Step: 231, initial loss: 1.957899808883667, rate: [2.8346963] Step: 241, initial loss: 1.9166322946548462, rate: [2.7527559] Step: 251, initial loss: 1.8773547410964966, rate: [2.6724033] Step: 261, initial loss: 1.8401153087615967, rate: [2.593743] Step: 271, initial loss: 1.8049590587615967, rate: [2.5168855] Step: 281, initial loss: 1.7719217538833618, rate: [2.4419453] Step: 291, initial loss: 1.7410329580307007, rate: [2.3690412] Step: 301, initial loss: 1.7123128175735474, rate: [2.2982967] Step: 311, initial loss: 1.6857695579528809, rate: [2.2298372] Step: 321, initial loss: 1.6613987684249878, rate: [2.1637883] Step: 331, initial loss: 1.6391825675964355, rate: [2.1002767] Step: 341, initial loss: 1.6190868616104126, rate: [2.0394242] Step: 351, initial loss: 1.6010609865188599, rate: [1.9813483] Step: 361, initial loss: 1.5850363969802856, rate: [1.9261574] Step: 371, initial loss: 1.5709290504455566, rate: [1.8739485] Step: 381, initial loss: 1.5586371421813965, rate: [1.8248036] Step: 391, initial loss: 1.548044204711914, rate: [1.7787862] Step: 401, initial loss: 1.5390206575393677, rate: [1.7359377] Step: 411, initial loss: 1.531427025794983, rate: [1.6962754] Step: 421, initial loss: 1.5251177549362183, rate: [1.6597888] Step: 431, initial loss: 1.5199435949325562, rate: [1.6264396] Step: 441, initial loss: 1.515757441520691, rate: [1.5961599] Step: 451, initial loss: 1.512417197227478, rate: [1.5688542] Step: 461, initial loss: 1.509787917137146, rate: [1.5444001] Step: 471, initial loss: 1.5077472925186157, rate: [1.5226521] Step: 481, initial loss: 1.5061856508255005, rate: [1.5034451] Step: 491, initial loss: 1.5050065517425537, rate: [1.4865993] Step: 501, initial loss: 1.5041279792785645, rate: [1.4719249] Step: 511, initial loss: 1.5034822225570679, rate: [1.4592265] Step: 521, initial loss: 1.503013253211975, rate: [1.4483094] Step: 531, initial loss: 1.5026769638061523, rate: [1.4389826] Step: 541, initial loss: 1.5024389028549194, rate: [1.4310625] Step: 551, initial loss: 1.5022717714309692, rate: [1.4243762] Step: 561, initial loss: 1.5021560192108154, rate: [1.4187633] Step: 571, initial loss: 1.5020768642425537, rate: [1.4140763] Step: 581, initial loss: 1.5020227432250977, rate: [1.410183] Step: 591, initial loss: 1.5019865036010742, rate: [1.4069647] Step: 601, initial loss: 1.501962423324585, rate: [1.404317] Step: 611, initial loss: 1.5019463300704956, rate: [1.4021491] Step: 621, initial loss: 1.5019360780715942, rate: [1.4003817] Step: 631, initial loss: 1.5019294023513794, rate: [1.3989472] Step: 641, initial loss: 1.501924991607666, rate: [1.3977878] Step: 651, initial loss: 1.5019222497940063, rate: [1.3968544] Step: 661, initial loss: 1.5019203424453735, rate: [1.3961065] Step: 671, initial loss: 1.5019193887710571, rate: [1.3955094] Step: 681, initial loss: 1.5019186735153198, rate: [1.3950344] Step: 691, initial loss: 1.5019183158874512, rate: [1.3946582] Step: 701, initial loss: 1.5019179582595825, rate: [1.394361] Step: 711, initial loss: 1.5019176006317139, rate: [1.3941275] Step: 721, initial loss: 1.5019176006317139, rate: [1.3939446] Step: 731, initial loss: 1.5019173622131348, rate: [1.3938022] Step: 741, initial loss: 1.5019174814224243, rate: [1.3936914] Step: 751, initial loss: 1.5019176006317139, rate: [1.393606] Step: 761, initial loss: 1.5019174814224243, rate: [1.39354] Step: 771, initial loss: 1.5019174814224243, rate: [1.3934891] Step: 781, initial loss: 1.5019174814224243, rate: [1.3934503] Step: 791, initial loss: 1.5019176006317139, rate: [1.3934208] . f, ax = plt.subplots(figsize=(15,10)) Artists = namedtuple(&quot;Artists&quot;,(&quot;prob&quot;,&quot;step&quot;)) artists = Artists(plt.plot([], [], &quot;r--&quot;,animated=True)[0], ax.text(x=0.9*vrp[-1].numpy(), y = 0.05, s=&quot;&quot;)) init = partial(init_fig, f=f, ax=ax, artists=artists, data=fake_samples) update = partial(update_artists, artists=artists, value_range=vrp) frame = partial(frame_iter, update_list=ulp, prob_values=pvp) ani = animation.FuncAnimation(fig=f, func=update, frames = frame, init_func = init) . ani_file = &#39;assets/mle_poisson.mp4&#39; # Save animation into MP4 file ani.save(filename=ani_file) . After estimating the parameters of a Poisson distribution, the shape of the modelled distribution is similar to the distribution of the data (animation uploaded to YouTube): . And we plot the learning curves: . plot_curves(ulp, fake_samples, [rate]) . Give this method a try using a different dataset, or think what you should change to use a different distribution. .",
            "url": "https://mlgxmez.github.io/thelongrun/jupyter/2019/11/24/maximum-likelihood-estimation.html",
            "relUrl": "/jupyter/2019/11/24/maximum-likelihood-estimation.html",
            "date": " • Nov 24, 2019"
        }
        
    
  
    
        ,"post5": {
            "title": "Introduction to random variables for non-data scientists",
            "content": "Introduction to random variables for non-data scientists . . Me: Hey, just took a pic in the library! Look at how old and dusty are these books! . You: Are these the oldest ones you found in there . Me: No, I didn’t inspect all of them. just picked these five. . You: Look! In the background you can see plenty of them. How many books do you think there were in the library? . Me: Uh, I don’t know…Maybe between 3000 and 5000? . :clapper: Cut! . That’s not a scene from a movie. My intention was to develop some intiuition on what random variables are, because this concept will appear again and again in this blog. . To define a random variable, it’s better to start defining the opposite of a random variable. . A deterministic variable is a variable we are 100% sure about its value. | A random variable is characterized by absence of complete data, but we can provide an estimate of its true value based on intuition or past experiences. | . In short, a deterministic variable is defined by a single value (like a number, text or date). A random variable is defined with a probability distribution over a range of values. This distribution represents what are the possible values a variable can get, each value has probability linked to. . Going back to the short dialogue, there were five books. We call the number of books in the picture a deterministic variable. This is how we represent that variable with a probability distribution. . . The number of books in the whole library is actually higher. I didn’t count all of them. I provided an estimate. The factors that led to that estimate (between 3000 and 5000) could be the size of the library, or average thickness of book’s spine. In any case, that estimate could be represented with the followng probability distribution. . . That’s a uniform distribution. In simple terms, it means “the probability of the library having 3000 books is as likely as having 5000 or any other quantity in between”. . . That’s a normal distribution. It can be interpreted as “the number of books is between 3000 and 5000 but we are more certain that this quantity is somewhere in the middle”. . Probability distributions have the following properties: . Probability values are bounded between 0 and 1. | The area under the curve of normalized probability distribution is equal to 1 | . Warning When the value range is lower than one the first property is violated in favor of the second one. . Random variables with TensorFlow Probability . TensorFlow is one of the most popular frameworks for numerical computation and machine learning. What makes TensorFlow Probability unique are the capabilities to do probabilistic programming. A programming paradigm where you can define random variables. . import tensorflow as tf import tensorflow_probability as tf deterministic_var = tf.Variable(5.) # Books in the picture random_var = tfd.Normal(4000.0, 500.0) # Books in the library . The normal distribution models the number of books in the library. random_var requires two arguments: the mean and the standard deviation of the distribution. . TensorFlow Probability has a list of functions to interact with random variables. Use them carefully: . # Returns the mean of the random variable random_var.mean() # Returns the mode of the random variable random_var.mode() # Likelihood (probability) that the random variable is equal to 3300 random_var.prob(3300) # Probability that the random variable is lower than or equal to 3300 random_var.cdf(3300) # The 20th percentile fo the random variable random_var.quantile(0.2) # Generate 10 samples from the distribution of the random variable random_var.sample(10) . Random variables and distributions linked to them are some of the essential components of probabilistic programming. We will dive deeper in future posts. . Further reading . We’ve barely scratched the surface of random variables. Depending on what we are trying to describe some distributions will fit better than others. Here is a list with (mostly) all the different probability distributions. . In the TensorFlow website there’s a great variety of tutorials, and also the instructions to install this library in your computer. Similarly for Tensorflow Probability. .",
            "url": "https://mlgxmez.github.io/thelongrun/markdown/2019/11/12/random-variables.html",
            "relUrl": "/markdown/2019/11/12/random-variables.html",
            "date": " • Nov 12, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mlgxmez.github.io/thelongrun/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mlgxmez.github.io/thelongrun/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}